#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon
    tune.ssl.default-dh-param 2048
    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode http
    log global
    option httplog
    option  http-server-close
    option  dontlognull
    option  redispatch
    option  contstats
    retries 3
    backlog 10000
    timeout client          25s
    timeout connect          5s
    timeout server          25s
    # timeout tunnel available in ALOHA 5.5 or HAProxy 1.5-dev10 and higher
    timeout tunnel        3600s
    timeout http-keep-alive  1s
    timeout http-request    15s
    timeout queue           30s
    timeout tarpit          60s
    default-server inter 3s rise 2 fall 3
    option forwardfor



frontend ft_web
    bind *:80 name http
    bind *:443 ssl crt /opt/eoffice_la.pem
    maxconn 10000
    default_backend bk_web

    # Any URL beginning with socket.io will be flagged as 'is_websocket'
    #acl is_websocket path_beg /socket.io
    #acl is_websocket hdr(Upgrade) -i WebSocket
    #acl is_websocket hdr_beg(Host) -i ws

    acl portal hdr(host) -i uat.eoffice.la
    acl api hdr(host) -i uat-api.eoffice.la
    acl job hdr(host) -i job-uat.eoffice.la
    acl socket hdr(host) -i socket-uat.eoffice.la
    acl trace hdr(host) -i trace-uat.eoffice.la
    acl hub hdr(host) -i hub.eoffice.la
    acl storage hdr(host) -i storage-uat.eoffice.la
    acl stconsole hdr(host) -i stconsole-uat.eoffice.la

    acl api-local hdr(host) -i api.local
    acl job-local hdr(host) -i job.local
    acl socket-local hdr(host) -i socket.local
    acl storage-local hdr(host) -i storage.local


    # The connection to use if 'is_websocket' is flagged
    use_backend socket_cluster if socket
    #use_backend websockets if is_websocket
    use_backend websockets if portal
    use_backend job_cluster if job
    use_backend api_cluster if api
    use_backend hub_cluster if hub
    use_backend storage_cluster if storage
    use_backend storage_console_cluster if stconsole
    use_backend storage_cluster if storage-local

    use_backend socket_cluster if socket-local
    use_backend job_cluster if job-local
    use_backend api_cluster if api-local

backend bk_web
    balance roundrobin
    server websrv1 10.1.1.72:5000 cookie websrv1 check
    server websrv2 10.1.1.73:5000 cookie websrv2 check

backend websockets
    balance roundrobin
    mode http
    #option http-server-close
    option http-keep-alive
    option forceclose
    cookie SERVER_USED insert indirect nocache
    server websrv1 10.1.1.72:5000 check cookie s1
    server websrv2 10.1.1.73:5000 check cookie s2

backend socket_cluster
    balance roundrobin
    mode http
    #option http-server-close
    option http-keep-alive
    option forceclose
    cookie SERVER_USED insert indirect nocache
    server websrv1 10.1.1.72:6000 check cookie s1
    server websrv2 10.1.1.73:6000 check cookie s2


backend job_cluster
   balance roundrobin
    mode http
    #option http-server-close
    option http-keep-alive
    option forceclose
    cookie SERVER_USED insert indirect nocache
    server websrv1 10.1.1.72:3000 check cookie s1
    server websrv2 10.1.1.73:3000 check cookie s2

backend api_cluster
    balance roundrobin
    mode http
    #option http-server-close
    option http-keep-alive
    option forceclose
    cookie SERVER_USED insert indirect nocache
    server websrv1 10.1.1.72:4000 check cookie s1
    server websrv2 10.1.1.73:4000 check cookie s2

backend trace_cluster
    balance roundrobin
    mode http
    #option http-server-close
    option http-keep-alive
    option forceclose
    cookie SERVER_USED insert indirect nocache
    server websrv1 10.1.1.72:2000 check cookie s1
    server websrv2 10.1.1.73:2000 check cookie s2    

backend hub_cluster
    balance roundrobin
    mode http
    #option http-server-close
    option http-keep-alive
    option forceclose
    cookie SERVER_USED insert indirect nocache
    server websrv1 10.1.1.72:7000 check cookie s1
    server websrv2 10.1.1.73:7000 check cookie s2

backend storage_cluster
    balance roundrobin
    mode http
    #option http-server-close
    option http-keep-alive
    option forceclose
    cookie SERVER_USED insert indirect nocache
    server websrv1 10.1.1.72:9000 check cookie s1
    server websrv2 10.1.1.73:9000 check cookie s2

backend storage_console_cluster
    balance roundrobin
    mode http
    #option http-server-close
    option http-keep-alive
    option forceclose
    cookie SERVER_USED insert indirect nocache
    server websrv1 10.1.1.72:9001 check cookie s1
    server websrv2 10.1.1.73:9001 check cookie s2